Gitの練習をしていきます
基本的なワークフローを学びます。

GitHub
アクセストークン

j下へ
k上へ
q閉じる
cd移動
ls見る
-a隠れファイルも見r

cat <>中身を見る


testtest
git init
git add <>
git commit -v
git commit -amend (直前のコミットを修正する　git pushしたコミットはやり直してはいけない)

git rm <>
q←戻る
git status

git log
git log --oneline　一行表示
git log -p ファイル名
git log -n 3 最近の三つ


ファイルの変更差分表示
git diff <>
ステージとの差分
git diff HEAD <>
ステージとコミットの差分

git remote -v
リモートリポジトリ先を表示
git remote add <origin>(リモート先) <http~~>（URL）登録
git push origin masSter
origin(リモート名)master(ブランチ名)
git push origin feature
登録したGitHubへ送る
featureブランチを送る

リモート先の詳しい情報を知る
git remote show <リモート名>
リモート名名前を変える
git remote rename<旧リモート名><新リモート名>
リモートを削除する
git remote rm <リモート名>

リモートから情報を取得する
git fetch <リモート先>
git fetch origin
ローカルに保存
git merge origin/master

リモートから取得し、ローカルに保存
git pull <リモート名><ブランチ名>

変更履歴をマージ(統合)する
git merge <ブランチ名>
git merge <リモート名/ブランチ名>

マージには三種類ある
①fast foward　早送りになる統合
ブランチが枝分かれしてなかったときはポインタを進めるだけ
②auto merge　基本的なマージ
ブランチが枝分かれしていたときは、ブランチの指したの内容を統合する。この場合親コミットが二つある
③コンフリクト　同じ個所で別々の変更をしたとき
<<HEAD~~~~~~
==========
~~~~~~>>feature
と表記されるため適宜、削除か置き換え

リモートから取得し、ローカルに保存
git pull <リモート名><ブランチ名>



ブランチ（枝)
HEADは今のブランチのこと
通常masterブランチはリリース用のブランチとする。
そのため通常マージはmasterから他のブランチに向けてマージする
ブランチ作成
git branch <ブランチ名>
ブランチ確認
git branch -a
ブランチ切り替え
git checkout <ブランチ名>
git checkout -b <新規ブランチ名>
ブランチ名変更
git branch -m <ブランチ名>
ブランチ削除
git branch -d <ブランチ名>
マージされていないものもブランチ強制削除
git branch -D <ブランチ名>

コピーを作成
git clone <>


Github

ファイルを削除を記録
.gitignoreファイルに指定
git rm <> リポジトリ、ワークツリーから削除
git rm --cached <>　リポジトリから削除

ステージした変更を取り消す
git reset HEAD <>
ファイルの変更を取り消す
git checkout -- <>

ファイルの移動を記録
git mv<旧ファイル名><新ファイル名>


originmaster　gitのこと。
nothin to commit working tree is crean
変更するものはなにもないよ
change not stagged for commit
ステージ化してないよ
change to be committed
コミットしてないよ

git checkout -b pull_request

gitはスナップショットで保存している。差分ではなく、すべてのファイルをその時々で保存している。
コミットを追うことでその時々のファイルを瞬時に追える。


Q&A
ステージはどうしてあるのか？
↓
変更が完了したものを随時ステージ化することでどのファイルが変更されたのかどうかを確認することができる

git gitdiff

エイリアス設定(省略)
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout
